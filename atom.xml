<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>晚来天欲雪 能饮一杯无</title>
  
  <subtitle>须臾纳永恒</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-02-05T13:05:46.642Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>wofeishenling</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>1008 Elevator （20 分）</title>
    <link href="http://yoursite.com/2019/02/05/1008-Elevator-%EF%BC%8820-%E5%88%86%EF%BC%89/"/>
    <id>http://yoursite.com/2019/02/05/1008-Elevator-（20-分）/</id>
    <published>2019-02-05T13:04:35.000Z</published>
    <updated>2019-02-05T13:05:46.642Z</updated>
    
    <content type="html"><![CDATA[<p>emmm……阅读题<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>, N, level = <span class="number">0</span>, input;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;N);</span><br><span class="line">sum += N * <span class="number">5</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;input);</span><br><span class="line"><span class="keyword">if</span> (input &gt; level)</span><br><span class="line">sum += (input - level) * <span class="number">6</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">sum += (level - input) * <span class="number">4</span>;</span><br><span class="line">level = input;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;emmm……阅读题&lt;br&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;
      
    
    </summary>
    
      <category term="PAT A" scheme="http://yoursite.com/categories/PAT-A/"/>
    
    
  </entry>
  
  <entry>
    <title>1007 Maximum Subsequence Sum （25 分）</title>
    <link href="http://yoursite.com/2019/02/05/1007-Maximum-Subsequence-Sum-%EF%BC%8825-%E5%88%86%EF%BC%89/"/>
    <id>http://yoursite.com/2019/02/05/1007-Maximum-Subsequence-Sum-（25-分）/</id>
    <published>2019-02-05T12:56:27.000Z</published>
    <updated>2019-02-05T12:58:07.868Z</updated>
    
    <content type="html"><![CDATA[<p>动态规划：最大连续子序列和<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">10010</span>;</span><br><span class="line"><span class="keyword">int</span> input[MAX], dp[MAX],s[MAX];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;input[i]);</span><br><span class="line">&#125;</span><br><span class="line">dp[<span class="number">0</span>] = input[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (dp[i - <span class="number">1</span>] + input[i] &gt; input[i])</span><br><span class="line">&#123;</span><br><span class="line">dp[i] = dp[i - <span class="number">1</span>] + input[i];</span><br><span class="line">s[i] = s[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">dp[i] = input[i];</span><br><span class="line">s[i] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (dp[i] &gt; dp[k])</span><br><span class="line">&#123;</span><br><span class="line">k = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (dp[k] &lt; <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"0 %d %d"</span>, input[<span class="number">0</span>], input[n - <span class="number">1</span>]);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d %d"</span>, dp[k], input[s[k]], input[k]);</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;动态规划：最大连续子序列和&lt;br&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/sp
      
    
    </summary>
    
      <category term="PAT A" scheme="http://yoursite.com/categories/PAT-A/"/>
    
    
  </entry>
  
  <entry>
    <title>1006 Sign In and Sign Out （25 分）</title>
    <link href="http://yoursite.com/2019/02/05/1006-Sign-In-and-Sign-Out-%EF%BC%8825-%E5%88%86%EF%BC%89/"/>
    <id>http://yoursite.com/2019/02/05/1006-Sign-In-and-Sign-Out-（25-分）/</id>
    <published>2019-02-05T11:53:40.000Z</published>
    <updated>2019-02-05T11:55:52.273Z</updated>
    
    <content type="html"><![CDATA[<p>简单的字符串sort<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="built_in">string</span> ID;</span><br><span class="line"><span class="built_in">string</span> signin;</span><br><span class="line"><span class="built_in">string</span> signout;</span><br><span class="line">student(<span class="built_in">string</span> s1, <span class="built_in">string</span> s2, <span class="built_in">string</span> s3) :ID(s1), signin(s2), signout(s3) &#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">string</span> ID, signin, signout;</span><br><span class="line"><span class="built_in">vector</span>&lt;student&gt; input;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; ID &gt;&gt; signin &gt;&gt; signout;</span><br><span class="line"><span class="function">student <span class="title">tmp</span><span class="params">(ID, signin, signout)</span></span>;</span><br><span class="line">input.push_back(tmp);</span><br><span class="line">&#125;</span><br><span class="line">sort(input.begin(), input.end(), [](<span class="keyword">auto</span>&amp; a, <span class="keyword">auto</span>&amp; b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a.signin &lt; b.signin;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; input[<span class="number">0</span>].ID &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">sort(input.begin(), input.end(), [](<span class="keyword">auto</span>&amp; a, <span class="keyword">auto</span>&amp; b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a.signout &gt; b.signout;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; input[<span class="number">0</span>].ID;</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;简单的字符串sort&lt;br&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;
      
    
    </summary>
    
      <category term="PAT A" scheme="http://yoursite.com/categories/PAT-A/"/>
    
    
  </entry>
  
  <entry>
    <title>1005 Spell It Right （20 分）</title>
    <link href="http://yoursite.com/2019/02/05/1005-Spell-It-Right-%EF%BC%8820-%E5%88%86%EF%BC%89/"/>
    <id>http://yoursite.com/2019/02/05/1005-Spell-It-Right-（20-分）/</id>
    <published>2019-02-05T11:39:51.000Z</published>
    <updated>2019-02-05T11:45:08.939Z</updated>
    
    <content type="html"><![CDATA[<p>简单的字符串处理<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="built_in">string</span>&gt; int2string = &#123;</span><br><span class="line">&#123; <span class="string">'0'</span>,<span class="string">"zero"</span> &#125;,&#123; <span class="string">'1'</span>,<span class="string">"one"</span> &#125;,&#123; <span class="string">'2'</span>,<span class="string">"two"</span> &#125;,&#123; <span class="string">'3'</span>,<span class="string">"three"</span> &#125;,&#123; <span class="string">'4'</span>,<span class="string">"four"</span> &#125;,</span><br><span class="line">&#123; <span class="string">'5'</span>,<span class="string">"five"</span> &#125;,&#123; <span class="string">'6'</span>,<span class="string">"six"</span> &#125;,&#123; <span class="string">'7'</span>,<span class="string">"seven"</span> &#125;,&#123; <span class="string">'8'</span>,<span class="string">"eight"</span> &#125;,&#123; <span class="string">'9'</span>,<span class="string">"nine"</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> input;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; input;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; input.size(); i++)</span><br><span class="line">&#123;</span><br><span class="line">sum += (input[i] - <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> csum[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">sprintf</span>(csum, <span class="string">"%d"</span>, sum);</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">ssum</span><span class="params">(csum)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ssum.size(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; int2string[ssum[i]];</span><br><span class="line"><span class="keyword">if</span> (i &lt; ssum.size() - <span class="number">1</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;简单的字符串处理&lt;br&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;b
      
    
    </summary>
    
      <category term="PAT A" scheme="http://yoursite.com/categories/PAT-A/"/>
    
    
  </entry>
  
  <entry>
    <title>字符串数值互转</title>
    <link href="http://yoursite.com/2019/02/05/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E5%80%BC%E4%BA%92%E8%BD%AC/"/>
    <id>http://yoursite.com/2019/02/05/字符串数值互转/</id>
    <published>2019-02-05T11:32:11.000Z</published>
    <updated>2019-02-05T11:43:27.004Z</updated>
    
    <content type="html"><![CDATA[<p><strong>字符串和整型的转换非常常见，在c++中，利用sscanf和sprintf函数是较为方便快捷的选择。</strong></p><p>sprintf(char<em> Buffer,const char</em> Format,…)</p><p>sscanf(char<em> Buffer,const char</em> Format,&amp;…)<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">stirng2int：</span><br><span class="line">    <span class="built_in">string</span> input；</span><br><span class="line">    <span class="keyword">int</span> output;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;input;</span><br><span class="line">    <span class="built_in">sscanf</span>(input.c_str(),<span class="string">"%d"</span>,&amp;output);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; output;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">int2string:</span><br><span class="line">    <span class="keyword">int</span> input;</span><br><span class="line">    <span class="keyword">char</span> temp[buffersize];</span><br><span class="line">    <span class="built_in">sprintf</span>(temp,<span class="string">"%d"</span>,input);</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">output</span><span class="params">(temp)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; output;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;字符串和整型的转换非常常见，在c++中，利用sscanf和sprintf函数是较为方便快捷的选择。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;sprintf(char&lt;em&gt; Buffer,const char&lt;/em&gt; Format,…)&lt;/p&gt;
&lt;p&gt;sscanf
      
    
    </summary>
    
      <category term="基本操作" scheme="http://yoursite.com/categories/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>1004 Counting Leaves （30 分）</title>
    <link href="http://yoursite.com/2019/02/05/1004-Counting-Leaves-%EF%BC%8830-%E5%88%86%EF%BC%89/"/>
    <id>http://yoursite.com/2019/02/05/1004-Counting-Leaves-（30-分）/</id>
    <published>2019-02-05T08:20:12.000Z</published>
    <updated>2019-02-05T08:21:41.019Z</updated>
    
    <content type="html"><![CDATA[<p>树的DFS，也可以用BFS<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[<span class="number">110</span>];</span><br><span class="line"><span class="keyword">int</span> leaf[<span class="number">110</span>],max_h;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> root, <span class="keyword">int</span> h)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">max_h = max(max_h, h);</span><br><span class="line"><span class="keyword">if</span> (G[root].size() == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">leaf[h]++;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G[root].size(); i++)</span><br><span class="line">&#123;</span><br><span class="line">DFS(G[root][i], h + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> p, num, temp;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;p, &amp;num);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;temp);</span><br><span class="line">G[p].push_back(temp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">DFS(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= max_h; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, leaf[i]);</span><br><span class="line"><span class="keyword">if</span> (i != max_h) <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;树的DFS，也可以用BFS&lt;br&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/sp
      
    
    </summary>
    
      <category term="PAT A" scheme="http://yoursite.com/categories/PAT-A/"/>
    
    
  </entry>
  
  <entry>
    <title>1003 Emergency （25 分）</title>
    <link href="http://yoursite.com/2019/02/05/1003-Emergency-%EF%BC%8825-%E5%88%86%EF%BC%89/"/>
    <id>http://yoursite.com/2019/02/05/1003-Emergency-（25-分）/</id>
    <published>2019-02-05T06:19:16.000Z</published>
    <updated>2019-02-05T06:21:35.298Z</updated>
    
    <content type="html"><![CDATA[<p>最短路径+最大点权<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">510</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1000000000</span>;</span><br><span class="line"><span class="keyword">int</span> G[MAXN][MAXN], weight[MAXN], d[MAXN],numPath[MAXN],maxW[MAXN];</span><br><span class="line"><span class="keyword">bool</span> vis[MAXN];</span><br><span class="line"><span class="keyword">int</span> numv, nume, st, dest;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">d[s] = <span class="number">0</span>;</span><br><span class="line">maxW[s] = weight[s];</span><br><span class="line">numPath[s] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numv; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> u = <span class="number">-1</span>, min = INF;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; numv; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (vis[j] == <span class="literal">false</span> &amp;&amp; d[j] &lt; min)</span><br><span class="line">&#123;</span><br><span class="line">min = d[j];</span><br><span class="line">u = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (u == <span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">vis[u] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; numv; v++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (vis[v] == <span class="literal">false</span> &amp;&amp; G[u][v]!=INF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (d[u] + G[u][v] &lt; d[v])</span><br><span class="line">&#123;</span><br><span class="line">d[v] = d[u] + G[u][v];</span><br><span class="line">numPath[v] = numPath[u];</span><br><span class="line">maxW[v] = maxW[u] + weight[v];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (d[u] + G[u][v] == d[v])</span><br><span class="line">&#123;</span><br><span class="line">numPath[v] += numPath[u];</span><br><span class="line"><span class="keyword">if</span> (maxW[u] + weight[v] &gt; maxW[v])</span><br><span class="line">maxW[v] = maxW[u] + weight[v];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">fill(G[<span class="number">0</span>], G[<span class="number">0</span>] + MAXN * MAXN, INF);</span><br><span class="line">fill(d, d + MAXN, INF);</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; numv &gt;&gt; nume &gt;&gt; st &gt;&gt; dest;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numv; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;weight[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> a, b, dis;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nume; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;a, &amp;b, &amp;dis);</span><br><span class="line">G[a][b] = G[b][a] = dis;</span><br><span class="line">&#125;</span><br><span class="line">Dijkstra(st);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d"</span>, numPath[dest], maxW[dest]);</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最短路径+最大点权&lt;br&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;
      
    
    </summary>
    
      <category term="PAT A" scheme="http://yoursite.com/categories/PAT-A/"/>
    
    
  </entry>
  
  <entry>
    <title>1100 Mars Numbers （20 分）</title>
    <link href="http://yoursite.com/2019/01/30/1100-Mars-Numbers-%EF%BC%8820-%E5%88%86%EF%BC%89/"/>
    <id>http://yoursite.com/2019/01/30/1100-Mars-Numbers-（20-分）/</id>
    <published>2019-01-30T04:27:47.000Z</published>
    <updated>2019-01-30T04:30:49.837Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; i2m2i;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt; low2mar = &#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="string">"tret"</span>&#125;,&#123;<span class="number">1</span>,<span class="string">"jan"</span>&#125;,&#123;<span class="number">2</span>,<span class="string">"feb"</span>&#125;,&#123;<span class="number">3</span>,<span class="string">"mar"</span>&#125;,&#123;<span class="number">4</span>,<span class="string">"apr"</span>&#125;,&#123;<span class="number">5</span>,<span class="string">"may"</span>&#125;,&#123;<span class="number">6</span>,<span class="string">"jun"</span>&#125;,&#123;<span class="number">7</span>,<span class="string">"jly"</span>&#125;,</span><br><span class="line">&#123;<span class="number">8</span>,<span class="string">"aug"</span>&#125;,&#123;<span class="number">9</span>,<span class="string">"sep"</span>&#125;,&#123;<span class="number">10</span>,<span class="string">"oct"</span>&#125;,&#123;<span class="number">11</span>,<span class="string">"nov"</span>&#125;,&#123;<span class="number">12</span>,<span class="string">"dec"</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt; high2mar = &#123;</span><br><span class="line">&#123;<span class="number">1</span>,<span class="string">"tam"</span>&#125;,&#123;<span class="number">2</span>,<span class="string">"hel"</span>&#125;,&#123;<span class="number">3</span>,<span class="string">"maa"</span>&#125;,&#123;<span class="number">4</span>,<span class="string">"huh"</span>&#125;,&#123;<span class="number">5</span>,<span class="string">"tou"</span>&#125;,&#123;<span class="number">6</span>,<span class="string">"kes"</span>&#125;,&#123;<span class="number">7</span>,<span class="string">"hei"</span>&#125;,&#123;<span class="number">8</span>,<span class="string">"elo"</span>&#125;,&#123;<span class="number">9</span>,<span class="string">"syy"</span>&#125;,</span><br><span class="line">&#123;<span class="number">10</span>,<span class="string">"lok"</span>&#125;,&#123;<span class="number">11</span>,<span class="string">"mer"</span>&#125;,&#123;<span class="number">12</span>,<span class="string">"jou"</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">i2m2i[<span class="string">"0"</span>] = <span class="string">"tret"</span>;</span><br><span class="line">i2m2i[<span class="string">"tret"</span>] = <span class="string">"0"</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">169</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">string</span> temp;</span><br><span class="line"><span class="keyword">int</span> high = i / <span class="number">13</span>;</span><br><span class="line"><span class="keyword">int</span> low = i % <span class="number">13</span>;</span><br><span class="line"><span class="keyword">if</span> (high != <span class="number">0</span>) temp += high2mar[high];</span><br><span class="line"><span class="keyword">if</span> (low != <span class="number">0</span>) &#123; </span><br><span class="line"><span class="keyword">if</span> (high != <span class="number">0</span>)temp += <span class="string">' '</span>;</span><br><span class="line">temp += low2mar[low];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">sprintf</span>(s, <span class="string">"%d"</span>, i);</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">tmp</span><span class="params">(s)</span></span>;</span><br><span class="line">i2m2i[tmp] = temp;</span><br><span class="line">i2m2i[temp] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">while</span> (n--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">string</span> temp;</span><br><span class="line">getline(<span class="built_in">cin</span>, temp);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i2m2i[temp] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
      <category term="PAT A" scheme="http://yoursite.com/categories/PAT-A/"/>
    
    
  </entry>
  
  <entry>
    <title>1109 Group Photo （25 分）</title>
    <link href="http://yoursite.com/2019/01/29/1109%20Group%20Photo%20%EF%BC%8825%20%E5%88%86%EF%BC%89/"/>
    <id>http://yoursite.com/2019/01/29/1109 Group Photo （25 分）/</id>
    <published>2019-01-29T09:16:10.296Z</published>
    <updated>2019-01-29T09:20:18.056Z</updated>
    
    <content type="html"><![CDATA[<p><strong>简单模拟 vector前向插入超时改用deque</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; ans;</span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="built_in">string</span>&gt; temp;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;&gt; input;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> st, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">temp.clear();</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line">temp.push_back(input[st].first);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (flag == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">temp.push_front(input[i+st].first);</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">temp.push_back(input[i+st].first);</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; tmp(temp.begin(),temp.end());</span><br><span class="line">ans.push_back(tmp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, k, NofRow,rear;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k);</span><br><span class="line"><span class="keyword">char</span> id[<span class="number">10</span>];</span><br><span class="line">NofRow = n / k;</span><br><span class="line">rear = n - (NofRow) * (k - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> length;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s %d"</span>, id, &amp;length);</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">name</span><span class="params">(id)</span></span>;</span><br><span class="line">input.push_back(make_pair(name, length));</span><br><span class="line">&#125;</span><br><span class="line">sort(input.begin(), input.end(), [](pair&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; a, pair&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a.second != b.second) <span class="keyword">return</span> a.second &gt; b.second;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> a.first &lt; b.first;</span><br><span class="line">&#125;);</span><br><span class="line">solve(<span class="number">0</span>, rear);</span><br><span class="line"><span class="keyword">int</span> st = rear;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k - <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">solve(st, NofRow);</span><br><span class="line">st += NofRow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ans.size(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; ans[i].size(); j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans[i][j];</span><br><span class="line"><span class="keyword">if</span> (j &lt; ans[i].size() - <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;简单模拟 vector前向插入超时改用deque&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;
      
    
    </summary>
    
      <category term="PAT A" scheme="http://yoursite.com/categories/PAT-A/"/>
    
    
  </entry>
  
  <entry>
    <title>1114 Family Property （25 分）</title>
    <link href="http://yoursite.com/2019/01/29/1114%20Family%20Property%20%EF%BC%8825%20%E5%88%86%EF%BC%89/"/>
    <id>http://yoursite.com/2019/01/29/1114 Family Property （25 分）/</id>
    <published>2019-01-29T06:19:11.331Z</published>
    <updated>2019-01-29T06:28:15.290Z</updated>
    
    <content type="html"><![CDATA[<p><strong>做这种题框架很重要，设计巧妙又快又准确</strong></p><p>并查集+map+set 本以为设计巧妙，结果花了好久😭！！！<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">10010</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">person</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> nset;</span><br><span class="line"><span class="keyword">int</span> narea;</span><br><span class="line">&#125;infoTable[MAX];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">family</span> &#123;</span></span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; mems;</span><br><span class="line"><span class="keyword">int</span> host;</span><br><span class="line"><span class="keyword">int</span> allset;</span><br><span class="line"><span class="keyword">int</span> allarea;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">double</span> avgset;</span><br><span class="line"><span class="keyword">double</span> avgarea;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> father[MAX], root[MAX];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findFather</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (father[x] == x) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">return</span> father[x] = findFather(father[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> faA = findFather(a);</span><br><span class="line"><span class="keyword">int</span> faB = findFather(b);</span><br><span class="line"><span class="keyword">if</span> (faA != faB) father[faA] = faB;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAX; i++) father[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">init();</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; alls;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">while</span> (n--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> self,fa,ma;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;self, &amp;fa, &amp;ma);</span><br><span class="line">alls.insert(self);</span><br><span class="line"><span class="keyword">if</span> (fa != <span class="number">-1</span>) &#123; Union(self, fa); alls.insert(fa); &#125;</span><br><span class="line"><span class="keyword">if</span> (ma != <span class="number">-1</span>) &#123; Union(self, ma); alls.insert(ma); &#125;</span><br><span class="line"><span class="keyword">int</span> nchild;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;nchild);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nchild; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> temp;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;temp);</span><br><span class="line">alls.insert(temp);</span><br><span class="line">Union(self, temp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;infoTable[self].nset, &amp;infoTable[self].narea);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,family&gt; families;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> e : alls)</span><br><span class="line">&#123;</span><br><span class="line">families[findFather(e)].mems.insert(e);</span><br><span class="line">families[findFather(e)].allset += infoTable[e].nset;</span><br><span class="line">families[findFather(e)].allarea += infoTable[e].narea;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> nf = families.size();</span><br><span class="line"><span class="built_in">vector</span>&lt;family&gt; ans(nf);</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> e : families)</span><br><span class="line">&#123;</span><br><span class="line">ans[cnt].host = *(e.second.mems.begin());</span><br><span class="line">ans[cnt].avgset = e.second.allset*<span class="number">1.0</span> / e.second.mems.size();</span><br><span class="line">ans[cnt].avgarea = e.second.allarea*<span class="number">1.0</span> / e.second.mems.size();</span><br><span class="line">ans[cnt].num = e.second.mems.size();</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line">sort(ans.begin(), ans.end(), [](family a,family b) &#123;</span><br><span class="line"><span class="keyword">if</span> (a.avgarea != b.avgarea) <span class="keyword">return</span> a.avgarea &gt; b.avgarea;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> a.host &lt; b.host;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans.size());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ans.size(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%04d %d %.3f %.3f\n"</span>, ans[i].host, ans[i].num, ans[i].avgset, ans[i].avgarea);</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;做这种题框架很重要，设计巧妙又快又准确&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;并查集+map+set 本以为设计巧妙，结果花了好久😭！！！&lt;br&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter
      
    
    </summary>
    
      <category term="PAT A" scheme="http://yoursite.com/categories/PAT-A/"/>
    
    
  </entry>
  
  <entry>
    <title>1118 Birds in Forest （25 分）</title>
    <link href="http://yoursite.com/2019/01/28/1118-Birds-in-Forest-%EF%BC%8825-%E5%88%86%EF%BC%89/"/>
    <id>http://yoursite.com/2019/01/28/1118-Birds-in-Forest-（25-分）/</id>
    <published>2019-01-28T08:56:08.000Z</published>
    <updated>2019-01-29T03:13:26.450Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">10010</span>;</span><br><span class="line"><span class="keyword">int</span> father[MAX], root[MAX];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findFather</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (father[x] == x) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">return</span> father[x]=findFather(father[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> faA = findFather(a);</span><br><span class="line"><span class="keyword">int</span> faB = findFather(b);</span><br><span class="line"><span class="keyword">if</span> (faA != faB) father[faA] = faB;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAX; i++) &#123;</span><br><span class="line">father[i] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; birds;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">while</span> (n--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> m, first;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;m, &amp;first);</span><br><span class="line">birds.insert(first);</span><br><span class="line">m--;</span><br><span class="line"><span class="keyword">while</span> (m--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> bird;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;bird);</span><br><span class="line">Union(first, bird);</span><br><span class="line">birds.insert(bird);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> maxbirds = birds.size();</span><br><span class="line"><span class="keyword">int</span> trees = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= maxbirds; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> fa = findFather(i);</span><br><span class="line">root[fa]++;</span><br><span class="line"><span class="keyword">if</span> (root[fa] == <span class="number">1</span>) trees++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, trees, maxbirds);</span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line"><span class="keyword">while</span> (q--) &#123;</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line"><span class="keyword">if</span> (findFather(a) == findFather(b)) <span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
      <category term="PAT A" scheme="http://yoursite.com/categories/PAT-A/"/>
    
    
  </entry>
  
  <entry>
    <title>并查集操作</title>
    <link href="http://yoursite.com/2019/01/28/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    <id>http://yoursite.com/2019/01/28/并查集/</id>
    <published>2019-01-28T07:55:03.000Z</published>
    <updated>2019-01-29T02:52:32.485Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">10010</span>;</span><br><span class="line"><span class="keyword">int</span> father[MAX], root[MAX];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findFather</span><span class="params">(<span class="keyword">int</span> x)</span><span class="comment">//递归写法简洁高效</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (father[x] == x) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">return</span> father[x]=findFather(father[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> faA = findFather(a);</span><br><span class="line"><span class="keyword">int</span> faB = findFather(b);</span><br><span class="line"><span class="keyword">if</span> (faA != faB) father[faA] = faB;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAX; i++) &#123;</span><br><span class="line">father[i] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/01/28/hello-world/"/>
    <id>http://yoursite.com/2019/01/28/hello-world/</id>
    <published>2019-01-28T07:49:22.737Z</published>
    <updated>2019-01-28T07:49:22.738Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
